#include "stdio.h"
#include "stdlib.h"
#include "hal_gpio.h"
#include "hal_sleep_driver.h"
#include "stdarg.h"
#include "hal_gpt.h"
#include "hal_uart.h"
#include "FreeRTOS.h"
#include "task.h"
#include "task_def.h"
#include "hal_platform.h"
#include "apb_proxy.h"
#include "ril.h"
#include "auto_register.h"


typedef unsigned char uint8_t;
#define  function 1
uint8_t  *nb_imei_number;
uint8_t  *nb_imsi;

#if 1

typedef  struct  
{    
   unsigned  char  MSGID;
   unsigned  char  FORMAT;
   unsigned  char  IMEI[16];
   unsigned  char  IMSI[16];
   unsigned  char  OPTIONH;
   unsigned  char  OPTIONL;
   unsigned  char  SERIALH;
   unsigned  char  SERIALL;
   unsigned  char  LENGTHH;
   unsigned  char  LENGTHL;
   unsigned  char  COMMANDCLASS;
   unsigned  char  COMMAND;
   unsigned  char  PSRQ;
   unsigned  char  CSQ;
   unsigned  char  DEVICETYPE;
   unsigned  char  DEVICESTATUS;
   unsigned  char  BATTERYLEVEL;
   unsigned  char  SENSORLEVEL;
   unsigned  char  CELLIDLENGTH;
   unsigned  char  CELLID;
   
} NB_NOTIFY_BUFF;

NB_NOTIFY_BUFF   notify_buff;


#endif


//静态变量定义
static volatile uint32_t receive_notice=0;
static volatile uint32_t send_notice=0;
static char rx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static char tx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static void user_uart_callback(hal_uart_callback_event_t status, void *user_data)
{  if(status == HAL_UART_EVENT_READY_TO_WRITE)
       send_notice = 1;
   else if(status == HAL_UART_EVENT_READY_TO_READ)
       receive_notice = 1;
}


static int32_t request_power_saving_mode(ril_cmd_response_t *rsp)
{

   return 0;
    
}



//十六进制的数据转换成十进制
void get_data_to_hex(char *out, char *in, int len) // "866256" -> "383636323536"
{
    int i;
    for (i = 0; i < len; i++) {
        sprintf(out + (i * 2), "%x", in[i]);                                       
    }
}


                            


// 亮灯的封装函数
void gpio_init(hal_gpio_pin_t x,hal_gpio_data_t y)
{
    hal_gpio_init(x);
    hal_pinmux_set_function(x, 0); 
    hal_gpio_set_direction(x, HAL_GPIO_DIRECTION_OUTPUT);
    hal_gpio_set_output(x, y);

}



//DMA下uart口配置
#if 1
void   dma_uart_config(void)
  {   
   
   hal_uart_dma_config_t dma_config;
   hal_uart_deinit(HAL_UART_3);
   hal_uart_config_t uart_config;
   uart_config.baudrate = HAL_UART_BAUDRATE_115200;
   uart_config.parity = HAL_UART_PARITY_NONE;
   uart_config.stop_bit = HAL_UART_STOP_BIT_1;
   uart_config.word_length = HAL_UART_WORD_LENGTH_8;
   hal_uart_init(HAL_UART_3, &uart_config);
   dma_config.receive_vfifo_alert_size = 50;
   dma_config.receive_vfifo_buffer = rx_vfifo_buffer;
   dma_config.receive_vfifo_buffer_size = 512;
   dma_config.receive_vfifo_threshold_size = 128;
   dma_config.send_vfifo_buffer =  tx_vfifo_buffer ;
   dma_config.send_vfifo_buffer_size = 512;
   dma_config.send_vfifo_threshold_size = 30;
   hal_uart_set_dma(HAL_UART_3, &dma_config);
   hal_uart_register_callback(HAL_UART_3, user_uart_callback, NULL);
    
   }




#endif
//打印函数
#if 1
int8_t debug_print(const char *fmt, ...)
{ 
    int n;   
    va_list ap;   
    //apb_proxy_at_cmd_result_t response; 
    char response_data[100];
    va_start(ap, fmt); 
    n = vsnprintf(response_data,100,fmt,ap);
    va_end(ap);      
    if(n >-1 && n < 100) 
    {   
        hal_uart_send_dma(HAL_UART_3,response_data,strlen(response_data));
        //response.result_code = APB_PROXY_RESULT_UNSOLICITED;   
        //response.pdata = response_data;  
        //response.length = strlen(response.pdata);   
        //response.cmd_id = APB_PROXY_INVALID_CMD_ID; 
        //apb_proxy_send_at_cmd_result(&response);   
        return 1; 
     }    
    return 0;  
}
#if 0
//psm接口
void PSM_Call_interface(bool parameter){
    ril_power_saving_mode_setting_req_t req_psm;
      
    if(parameter == 1)
    {  
        req_psm.mode = 1;
        req_psm.req_act_time = "";
        req_psm.req_gprs_rdy_tmr = "";
        req_psm.req_prdc_rau = "00011000";
        req_psm.req_prdc_tau = "00000000";
        ril_request_power_saving_mode_setting(RIL_EXECUTE_MODE ,&req_psm,request_power_saving_mode,NULL); 
        debug_print("123");
    }
    
    else
    {
        req_psm.mode = 0;
        req_psm.req_act_time = "";
        req_psm.req_gprs_rdy_tmr = "";
        req_psm.req_prdc_rau = "";
        req_psm.req_prdc_tau = "";
        ril_request_power_saving_mode_setting(RIL_EXECUTE_MODE ,&req_psm,request_power_saving_mode,NULL);
    }
}


#endif

               


#if 0

//获取ip的回调函数
static int32_t ip_callback(ril_cmd_response_t *cmd_response)
{     uint8_t addr_len=0;
     uint32_t addr[20];
    ril_show_pdp_address_rsp_t *response = (ril_show_pdp_address_rsp_t *)cmd_response->cmd_param;
      
       
        debug_print("addr:%d\r\n",strlen(response->cid_addr->pdp_addr_1)); 

return  0;
}

#endif 
  


//获取revision 修订版本号
static int32_t query_swver_callback(ril_cmd_response_t *rsp)
{
    ril_status_t ret = RIL_STATUS_SUCCESS;
    uint32_t  revis[20];
    uint8_t swver_len = 0;
    ril_revision_identification_rsp_t *param = (ril_revision_identification_rsp_t *)rsp->cmd_param;

    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
    {
        
        swver_len = strlen(param->revision);

        memcpy(revis,param->revision, (swver_len > AUTO_REG_SWVER_LEN)? AUTO_REG_SWVER_LEN : swver_len);
        //query IMSI
        debug_print("revision: %s\r\n",revis);
    }
    return 0;
}



//获取ICCID号 
static int32_t auto_register_query_iccid_callback(ril_cmd_response_t *rsp)
{
  
    uint8_t saved_iccid[AUTO_REG_ICCID_LEN];
    uint32_t iccid_len;
    uint32_t  iccid1[20];

    ril_read_usim_iccid_rsp_t *param = (ril_read_usim_iccid_rsp_t *)rsp->cmd_param;
    
    
    if (rsp->res_code == RIL_RESULT_CODE_OK && param != NULL) 
    {
        
        iccid_len = strlen(param->iccid);
        memcpy(iccid1, param->iccid,(iccid_len>AUTO_REG_ICCID_LEN)? AUTO_REG_ICCID_LEN:iccid_len);
         debug_print("ICCID:%d",iccid1);
        //read ICCID from NVDM   
    }

    return 0;
}






#if 1
//IMEI码回调函数
static uint8_t imei[16];
static int32_t query_imei_callback(ril_cmd_response_t *rsp)
{   
    uint8_t imei_len = 0;
    ril_serial_number_rsp_t *param = (ril_serial_number_rsp_t*)rsp->cmd_param;

    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
    {
        imei_len = strlen(param->value.imei);     
        memcpy(imei, param->value.imei,(imei_len > 15)? 15 : imei_len);
        debug_print("nb_imei_number:%s\n",imei);
    } 
    return 0;
}




#endif
//IMSI码回调函数
static uint8_t imsi[16];
static int32_t query_imsi_callback(ril_cmd_response_t *rsp)
{
    uint8_t imsi_len = 0;
    ril_imsi_rsp_t *param = (ril_imsi_rsp_t*)rsp->cmd_param;
    
    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
     {
        
        imsi_len = strlen(param->imsi);
        
        memcpy(imsi, param->imsi, (imsi_len > 15)? 15 : imsi_len);

        debug_print("nb_imsi_number:%s\n",imsi);
    } 
    return 0;
}



//CSQ回调函数
static unsigned int rssi;
static int32_t query_csq_callback(ril_cmd_response_t *rsp)
{
    ril_signal_quality_rsp_t *response = (ril_signal_quality_rsp_t *)rsp->cmd_param;
     if (rsp->res_code == RIL_RESULT_CODE_OK && response != NULL)
      {
        rssi = response->rssi;
        debug_print("csq:%d\r\n",rssi);
     }
    return 0;
}



//cellID 回调函数
static int32_t query_cellid_callback(ril_cmd_response_t *cmd_response)
{ 
    int32_t cell_id;
    uint8_t id[20];
    if(RIL_EXECUTE_MODE == cmd_response->mode && RIL_RESULT_CODE_OK == cmd_response->res_code)
    {
        ril_query_network_state_rsp_t *param = (ril_query_network_state_rsp_t*)cmd_response->cmd_param;
        if((param->sc_info != NULL)&&(param->sc_info->sc_cellid != NULL)){ 
            //debug_print("sc_cellid:%s\r\n", param->sc_info->sc_cellid ? param->sc_info->sc_cellid : "(omitted)");
           // memcpy(id, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            get_data_to_hex(id, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            debug_print("cellid:%s\r\n", id);
            //_itoa(cell_id, id, 10);
            //debug_print("id is %s\r\n", id);
        }
    }
    return 0;
}




//获取电池电压
static uint32_t get_battery_voltage(void)
{
    uint32_t adc_data;
    uint32_t adc_voltage;
    uint32_t battery_voltage;
    hal_adc_init();
    hal_adc_get_data_polling(HAL_ADC_CHANNEL_6, &adc_data);
    hal_adc_deinit();
    adc_voltage = (adc_data * 1400) / 4095;
    battery_voltage = adc_voltage * 4;
    return battery_voltage;
}


#if 1
//数据上报  电信
#define EXTRACT_HH(d)       ((unsigned char)((d)>>24))
#define EXTRACT_HL(d)       ((unsigned char)((d)>>16))
#define EXTRACT_LH(d)       ((unsigned char)((d)>>8))
#define EXTRACT_LL(d)       ((unsigned char)(d))
#define OPTION_NOP  0
#define OPTION_ACK  (1<<0)
#define  COMMANDCLASS_NOTIFICATION                               0x02
#define  COMMANDCLASS_ACK                                        0x01

#define CRC16_POLY 0x8005
#define CRC_INIT 0xFFFF

ATTR_ZIDATA_IN_RETSRAM bool send_error = FALSE;
bool cliend = FALSE;


unsigned  short CRC16culCalc(uint8_t crcData, unsigned  short crcReg) 
{
	uint8_t i;

	for (i = 0; i < 8; i++) 
	{
		if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
		{
			crcReg = (crcReg << 1) ^ CRC16_POLY;
		}
		else
		{
			crcReg = (crcReg << 1);
		}
		crcData <<= 1;
	}
	return crcReg;
}




unsigned  short CRC16_Get(uint8_t *str,unsigned   short length)
{
	unsigned  short checksum;
	uint8_t i;
	checksum = CRC_INIT; // Init value for CRC calculation
	for (i = 0; i < length; i++)
	{
		checksum = CRC16culCalc(*(str+i),checksum);
	}
	return checksum;


}




void send_data_format (void)                    
{        uint32_t cmdlength = 0;
         uint8_t paramstr[100];
         unsigned  short length = 0;
	     unsigned  short crc16;

    int i=0;
    notify_buff.MSGID=0x00;
    notify_buff.FORMAT=0x03;
    notify_buff.IMEI[16]="123456789112345";
    notify_buff.IMSI[16]="123456789112345";
    notify_buff.OPTIONH=EXTRACT_LH(0);
    notify_buff.OPTIONL=EXTRACT_LL(0);
       i++;
    notify_buff.SERIALH=EXTRACT_LH(i);
    notify_buff.SERIALL=EXTRACT_LL(i);
    notify_buff.COMMANDCLASS=0x02;
    notify_buff.COMMAND=0x01;
    notify_buff.PSRQ=0;
    notify_buff.CSQ=0;
    notify_buff.DEVICETYPE=1;
    notify_buff.DEVICESTATUS=1;
    notify_buff.BATTERYLEVEL=20;
    notify_buff.CELLIDLENGTH=7;
    notify_buff.CELLID=230833952;

    notify_buff.LENGTHH=15;
    notify_buff.LENGTHL=15;

length = (uint8_t*)(&(notify_buff.CELLID)) - &(notify_buff.MSGID) + 15;
crc16 = CRC16_Get((uint8_t*)(&notify_buff),length);
length = length-8;
*((uint8_t*)(&notify_buff)+length) = EXTRACT_LH(crc16);
*((uint8_t*)(&notify_buff)+length+1) = EXTRACT_LL(crc16);

//NB_Transmit((uint8_t*)(&notify_buff),length+3);
debug_print("DATA:%s\r\n",notify_buff);

}
#endif 

void  oc_register(void)
{   
    int register_number = 30;
    int notify_number = 10;

     uint8_t* ip="139.159.140.34";
     //uint8_t* ip="180.101.147.115";
     uint8_t* port_number="5683";
     uint8_t* time="7200";
     uint8_t* imei_number[15] = {"867994040002897"};


   apb_proxy_parse_cmd_param_t parse_cmd_file;
          parse_cmd_file.string_ptr = (char *)pvPortMalloc(58);
         
          sprintf(parse_cmd_file.string_ptr,"AT+M2MCLINEW=%s,%s,\"%s\",%s",ip,port_number,"867994040002897",time);
         
          parse_cmd_file.string_len = 58;

          parse_cmd_file.name_len = 100;

          parse_cmd_file.cmd_id = 223;
 
          parse_cmd_file.parse_pos = 13;

          parse_cmd_file.mode = 2;

      APB_PROXY_STATUS_OK == apb_proxy_hdlr_lwm2m_client_create_cmd(&parse_cmd_file);



               




#if 0
  if(APB_PROXY_STATUS_OK == apb_proxy_hdlr_lwm2m_client_create_cmd(&parse_cmd_file))
                  {
            do
                {
                 vTaskDelay(1000 / portTICK_RATE_MS);
 
                 if(lwm2m_register_success_mm() == TRUE)
                 {
                    break;
                 }   
                 else
                 {
                     register_number--;
                 }
                 }
                while(register_number>=0);
            if(register_number <= 0 )
            {
                debug_print("Connecting error");
                send_error = TRUE;
                vPortFree(NULL);
                
                vTaskDelay(1000 / portTICK_RATE_MS);
                vPortFree(parse_cmd_file.string_ptr);
            }

                 if(register_number <= 0)
            {
                
            }else
            {
               
                parse_cmd_file.string_ptr = (char *)pvPortMalloc(0);
                
               sprintf(parse_cmd_file.string_ptr,NULL,0);

                
                parse_cmd_file.string_len = 0;
     
                parse_cmd_file.cmd_id = 225;
     
                parse_cmd_file.parse_pos = 14;
                
                parse_cmd_file.mode = 2;

                apb_proxy_status_t client_send = apb_proxy_hdlr_lwm2m_client_send_cmd(&parse_cmd_file);
     
                if(client_send == APB_PROXY_STATUS_OK){
     
                    do{
                        vTaskDelay(1000 / portTICK_RATE_MS);
     
                         if(lwm2m_notify_success_mm()){//
     
                             cliend = TRUE;
     
                             break;
     
                         }else{
     
                             notify_number--;
     
                         }
     
                    }while(notify_number>=0);
     
                 
     
                }else{
     
                }
                vPortFree(parse_cmd_file.string_ptr);
                
               
            }
 
         }

         vPortFree(NULL);

         vTaskDelay(1000 / portTICK_RATE_MS);

#endif 
    }  
  
  void String_CopyStrToStr(uint8_t *str1,const uint8_t *str2,uint16_t length)
{
	uint16_t i;
	for(i=0;i<length;i++)
	{
		*(str1+i) = *(str2+i);
	}
}


void  data_send(void)
{
                

                apb_proxy_parse_cmd_param_t parse_cmd_file;

                parse_cmd_file.string_ptr = (char *)pvPortMalloc(0);
                
                String_CopyStrToStr(parse_cmd_file.string_ptr,NULL,0);

                parse_cmd_file.name_len = 100;
              
                parse_cmd_file.string_len = 0;
     
                parse_cmd_file.cmd_id = 225;
     
                parse_cmd_file.parse_pos = 14;
                
                parse_cmd_file.mode = 2;

                APB_PROXY_STATUS_OK == apb_proxy_hdlr_lwm2m_client_send_cmd(&parse_cmd_file);

}












#endif
#if 1
//正常亮灯函数
#if 0
void  gpio_application(void)
{   
    hal_gpt_init(HAL_GPT_1);
    hal_gpt_register_callback(HAL_GPT_1,gpio_application,NULL);
    hal_gpt_start_timer_ms(HAL_GPT_1,1000,HAL_GPT_TIMER_TYPE_ONE_SHOT);
    hal_gpio_init(HAL_GPIO_26);
    hal_pinmux_set_function(HAL_GPIO_26,1);
    hal_gpio_set_direction(HAL_GPIO_26,HAL_GPIO_DIRECTION_OUTPUT);
    hal_gpio_set_output(HAL_GPIO_26_PMU_GOTO_SLEEP,HAL_GPIO_DATA_HIGH);
}


#endif 

//轮询模式下的uart命令（该配置已在sys_init.c中定义好了）
#if 0

void uart_poll_application(void)
{    
    while(1)
    {  
        
        char  buffer[10];
        hal_uart_receive_polling(HAL_UART_3,buffer,10);
        hal_uart_send_polling(HAL_UART_3,buffer,10);
        vTaskDelay(1000 / portTICK_RATE_MS);
    }
    //vTaskDelete(NULL);
}   




#endif


//API函数 DMA完整版
#if  0
static volatile uint32_t receive_notice=0;
static volatile uint32_t send_notice=0;
static char rx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static char tx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static void user_uart_callback(hal_uart_callback_event_t status, void *user_data)
{  if(status == HAL_UART_EVENT_READY_TO_WRITE)
       send_notice = 1;
   else if(status == HAL_UART_EVENT_READY_TO_READ)
       receive_notice = 1;
}
static void uart_dma_application(void)
{  
 
   hal_uart_config_t uart_config;
    char buffer[64];
   char *pbuf;
   uint32_t left, snd_cnt, rcv_cnt;
   hal_uart_dma_config_t dma_config;
   char uart_prompt[] = "UART DMA mode begin\n";
   uart_config.baudrate = HAL_UART_BAUDRATE_115200;
   uart_config.parity = HAL_UART_PARITY_NONE;
   uart_config.stop_bit = HAL_UART_STOP_BIT_1;
   uart_config.word_length = HAL_UART_WORD_LENGTH_8;
   hal_uart_init(HAL_UART_3, &uart_config);
   dma_config.receive_vfifo_alert_size = 50;
   dma_config.receive_vfifo_buffer = rx_vfifo_buffer;
   dma_config.receive_vfifo_buffer_size = 512;
   dma_config.receive_vfifo_threshold_size = 128;
   dma_config.send_vfifo_buffer = tx_vfifo_buffer;
   dma_config.send_vfifo_buffer_size = 512;
   dma_config.send_vfifo_threshold_size = 51;
   hal_uart_set_dma(HAL_UART_3, &dma_config);
   hal_uart_register_callback(HAL_UART_3,user_uart_callback, NULL);
    
   hal_uart_send_dma(HAL_UART_3, uart_prompt, sizeof(uart_prompt));
   vTaskDelay(1000 / portTICK_RATE_MS);
   hal_uart_deinit(HAL_UART_3);
 }


#endif





// 通过软延时实现灯闪
#endif
void light()
{  
  // ril_show_pdp_address_req_t req;
   //PSM_Call_interface(1);

  
  for(int i=1;i<2;i++)
  {
   gpio_init(26,1);
   vTaskDelay(1000 / portTICK_RATE_MS);
   gpio_init(26,0);
   vTaskDelay(1000 / portTICK_RATE_MS);
  }
    ril_request_revision_identification(RIL_ACTIVE_MODE,query_swver_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

    ril_request_read_usim_iccid(RIL_ACTIVE_MODE, auto_register_query_iccid_callback, NULL);
       vTaskDelay(1000 / portTICK_RATE_MS);
     
    ril_request_serial_number(RIL_EXECUTE_MODE,1,query_imei_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);
     
     
    ril_request_imsi(RIL_ACTIVE_MODE,query_imsi_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);
    
    ril_request_query_network_state(RIL_EXECUTE_MODE,0,query_cellid_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);

    debug_print("battery_voltage:%d",get_battery_voltage());
     vTaskDelay(1000 / portTICK_RATE_MS);
    
    //ril_request_show_pdp_address(RIL_ACTIVE_MODE,NULL,ip_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);
     ril_request_signal_quality(RIL_ACTIVE_MODE,query_csq_callback,NULL);
     
}




static void my_function(void *para)

{   
     //gpio_application();
     //gnss_fota_uart_init();
     //gnss_fota_uart_get_byte();
    //uart_poll_application();
     dma_uart_config();
    //uart_dma_application();
     light();
    //uart_init();
    oc_register();
    data_send();


    vTaskDelay(1000 / portTICK_RATE_MS);
    vTaskDelete(NULL);

}



void  realize_function(void)
{
    xTaskCreate( my_function,
       "function", 
        (1024 * 2)/sizeof(uint8_t),
        NULL,
        1,
        NULL);
}

