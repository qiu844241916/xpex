#include "stdio.h"
#include "stdlib.h"
#include "hal_sleep_driver.h"
#include "stdarg.h"
#include "hal_gpt.h"
#include "hal_uart.h"
#include "FreeRTOS.h"
#include "task.h"
#include "task_def.h"
#include "hal_platform.h"
#include "apb_proxy.h"
#include "ril.h"
#include "auto_register.h"
#include "hal_gpio.h"

typedef unsigned char uint8_t;

static uint8_t  version[20];   //版本信息
static uint8_t  iccid[9];      //iccid 号
static uint8_t  imei[16];      //imei码
static uint8_t  imsi[16];      //IMSI码   
static uint8_t  cellid[7];     //小区id
static unsigned int  csq;      //CSQ
static uint32_t battery_voltage;//电池电压
static int32_t  rsrq;           //信号质量
static int32_t  rsrp;           //信号功率
static int32_t  snr;            //信噪比

static  char *  temp[64];       //发送的数据包


//结构定义参数列表
typedef  struct
{
unsigned char MSGID;
unsigned char FORMAT;
//unsigned char serial_h;
//unsigned char serial_l;
unsigned char imsi[15];
unsigned char imei[15];
unsigned char csq;
unsigned char cellid[7];
unsigned char rsrp;
unsigned char rsrq;
unsigned char snr;
//unsigned char CRC_H;
//unsigned char CRC_L;
} DATA;

DATA  notify_data;

///////////////////////////////////////////////////////////////////////////////////////////////////////

//十六进制的数据转换成十进制
void get_data_to_hex(char *out, char *in, int len) // "866256" -> "383636323536"
{
    int i;
    for (i = 0; i < len; i++) {
        sprintf(out + (i * 2), "%x", in[i]);                                       
    }
}

//bin to hex   字节流到十六进制
uint32_t bin_to_hex(char *dest, const uint8_t *source, uint32_t max_dest_len)
{ 
     uint32_t i = 0, j = 0;
    uint8_t ch1, ch2;
    while (j + 1 < max_dest_len)
    {   ch1 = (source[i] & 0xF0) >> 4;
        ch2 = source[i] & 0x0F;
        if (ch1 <= 9) { *(dest + j) = ch1 + '0';}   
            else { *(dest + j) = ch1 + 'A' - 10; }
        if (ch2 <= 9) { *(dest + j + 1) = ch2 + '0'; } else 
        {*(dest + j + 1) = ch2 + 'A' - 10;}
        i++;j += 2;} *(dest + j) = '\0';
       return j;
}

// led灯函数
void gpio_init(hal_gpio_pin_t x,hal_gpio_data_t y)
{
    hal_gpio_init(x);
    hal_pinmux_set_function(x, 0); 
    hal_gpio_set_direction(x, HAL_GPIO_DIRECTION_OUTPUT);
    hal_gpio_set_output(x, y);
}

//dma下 配置uart3
static volatile uint32_t receive_notice=0;
static volatile uint32_t send_notice=0;
static char rx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static char tx_vfifo_buffer[512] __attribute__ ((section(".noncached_zidata")));
static void user_uart_callback(hal_uart_callback_event_t status, void *user_data)
{  if(status == HAL_UART_EVENT_READY_TO_WRITE)
       send_notice = 1;
   else if(status == HAL_UART_EVENT_READY_TO_READ)
       receive_notice = 1;
}

void   dma_uart_config(void)
  {    
   hal_uart_dma_config_t dma_config;
   hal_uart_deinit(HAL_UART_3);
   hal_uart_config_t uart_config;
   uart_config.baudrate = HAL_UART_BAUDRATE_115200;
   uart_config.parity = HAL_UART_PARITY_NONE;
   uart_config.stop_bit = HAL_UART_STOP_BIT_1;
   uart_config.word_length = HAL_UART_WORD_LENGTH_8;
   hal_uart_init(HAL_UART_3, &uart_config);
   dma_config.receive_vfifo_alert_size = 50;
   dma_config.receive_vfifo_buffer = rx_vfifo_buffer;
   dma_config.receive_vfifo_buffer_size = 512;
   dma_config.receive_vfifo_threshold_size = 128;
   dma_config.send_vfifo_buffer =  tx_vfifo_buffer ;
   dma_config.send_vfifo_buffer_size = 512;
   dma_config.send_vfifo_threshold_size = 30;
   hal_uart_set_dma(HAL_UART_3, &dma_config);
   hal_uart_register_callback(HAL_UART_3, user_uart_callback, NULL);
   }

//uart3 打印log信息
int8_t debug_print(const char *fmt, ...)
{ 
    int n;   
    va_list ap;
    //apb_proxy_at_cmd_result_t response; 
    char response_data[200];
    va_start(ap, fmt); 
    n = vsnprintf(response_data,200,fmt,ap);
    va_end(ap);      
    if(n >-1 && n < 200) 
    {   
        hal_uart_send_dma(HAL_UART_3,response_data,strlen(response_data)); 
        return 1; 
     }    
    return 0;  
}

//////////////////////////////////////////query_callback//////////////////////////////////////////////////////////

//IMEI码回调函数
static int32_t query_imei_callback(ril_cmd_response_t *rsp)
{   
    uint8_t imei_len = 0;
    ril_serial_number_rsp_t *param = (ril_serial_number_rsp_t*)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
    {
        imei_len = strlen(param->value.imei);     
        memcpy(imei, param->value.imei,(imei_len > 15)? 15 : imei_len);
        debug_print("nb_imei_number:%s\n",imei);
    } 
    return 0;
}

//IMSI码回调函数
static int32_t query_imsi_callback(ril_cmd_response_t *rsp)
{
    uint8_t imsi_len = 0;
    ril_imsi_rsp_t *param = (ril_imsi_rsp_t*)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
     {
        imsi_len = strlen(param->imsi);
        memcpy(imsi, param->imsi, (imsi_len > 15)? 15 : imsi_len);
        debug_print("nb_imsi_number:%s\r\n",imsi);
    } 
    return 0;
}
//cellid 回调函数
static int32_t query_cellid_callback(ril_cmd_response_t *cmd_response)
{ 
    int32_t cell_id;
    if(RIL_EXECUTE_MODE == cmd_response->mode && RIL_RESULT_CODE_OK == cmd_response->res_code)
    {
        ril_query_network_state_rsp_t *param = (ril_query_network_state_rsp_t*)cmd_response->cmd_param;
        if((param->sc_info != NULL)&&(param->sc_info->sc_cellid != NULL)){ 
            //debug_print("sc_cellid:%s\r\n", param->sc_info->sc_cellid ? param->sc_info->sc_cellid : "(omitted)");
           // memcpy(id, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            get_data_to_hex(cellid, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            debug_print("cellid:%s\r\n", cellid);
            //_itoa(cell_id, id, 10);
            //debug_print("id is %s\r\n", id);
        }
    }
    return 0;
}

//获取revision 修订版本号
static int32_t query_swver_callback(ril_cmd_response_t *rsp)
{
    ril_status_t ret = RIL_STATUS_SUCCESS;
    
    uint8_t swver_len = 0;
    ril_revision_identification_rsp_t *param = (ril_revision_identification_rsp_t *)rsp->cmd_param;

    if (rsp->res_code == RIL_RESULT_CODE_OK && param!= NULL)
    {
        swver_len = strlen(param->revision);

        memcpy(version,param->revision, (swver_len > AUTO_REG_SWVER_LEN)? AUTO_REG_SWVER_LEN : swver_len);
        //query IMSI
        debug_print("revision: %s\r\n",version);
    }
    return 0;
}

//获取信号强度rsrp,信号功率rsrq，信噪比snr           
static void ResponseCallback(ril_cmd_response_t *cmd_response)
{ 
    if(RIL_EXECUTE_MODE == cmd_response->mode && RIL_RESULT_CODE_OK == cmd_response->res_code)
    {
        ril_query_network_state_rsp_t *param = (ril_query_network_state_rsp_t*)cmd_response->cmd_param;
        if((param->sc_info != NULL)&&(param->sc_info->sc_cellid != NULL)){ 
           // CellidNumber = (char*)malloc(strlen(param->sc_info->sc_cellid));
            //CellidNumber = strcpy(CellidNumber,param->sc_info->sc_cellid);
            //String_CopyStrToStr(CellIdNB,CellidNumber,strlen(CellidNumber));
            //CellIdNB[strlen(CellidNumber)] = '\0';
            rsrq = param->sc_info->sc_rsrq;
            if(rsrq < 0){
                rsrq = abs(rsrq); 
            }
            debug_print("RSRQ :%d\r\n",rsrq);
            rsrp = param->sc_info->sc_rsrp; 
            if(rsrp < 0){
                rsrp = abs(rsrp); 
            }
            debug_print("RSRP :%d\r\n",rsrp);
      //EarfcnNumber = param->sc_info->sc_earfcn;
      //if(EarfcnNumber < 0){
      //  EarfcnNumber = abs(EarfcnNumber); 
      //    }
            snr = param->sc_info->sc_snr;
            if(snr < 0){
                snr = abs(snr);
                snr = snr|0x80;
                debug_print("SNR :%d\r\n",snr);
            }    
        }
    } 
}

//CSQ回调函数
static int32_t query_csq_callback(ril_cmd_response_t *rsp)
{
    ril_signal_quality_rsp_t *response = (ril_signal_quality_rsp_t *)rsp->cmd_param;
     if (rsp->res_code == RIL_RESULT_CODE_OK && response != NULL)
      {
       csq = response->rssi;
        debug_print("csq:%d\r\n",csq);
     }
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

//oc华为云平台注册
void  oc_register(void)
{   
    int register_number = 30;
    int notify_number = 10;
     uint8_t* ip="139.159.140.34";
     //uint8_t* ip="180.101.147.115";
     uint8_t* port_number="5683";
     uint8_t* time="7200";
     uint8_t* imei_number[15] = {"867994040002897"};
   apb_proxy_parse_cmd_param_t parse_cmd_file;
          parse_cmd_file.string_ptr = (char *)pvPortMalloc(58);
          sprintf(parse_cmd_file.string_ptr,"AT+M2MCLINEW=%s,%s,\"%s\",%s",ip,port_number,"867994040002897",time);
          parse_cmd_file.string_len = 58;
          parse_cmd_file.name_len = 100;
          parse_cmd_file.cmd_id = 223;
          parse_cmd_file.parse_pos = 13;
          parse_cmd_file.mode = 2;
    APB_PROXY_STATUS_OK == apb_proxy_hdlr_lwm2m_client_create_cmd(&parse_cmd_file);
    }  


//数据打包发送oc云平台
void  data_send(void)
{      
       unsigned short CRC16;
       //int data_length;
       //serialnumber ++;
       notify_data.MSGID=0x01;
       notify_data.FORMAT=0x02;
       //notify_data.serial_h = EXTRACT_LH(serialnumber);
       //notify_data.serial_L = EXTRACT_LL(serialnumber);
       //getimsi(notify_data.imsi); 
       memcpy(notify_data.imsi,imsi,15);
       debug_print("imsi:%s",notify_data.imsi);
       //getimei(notify_data.imei);
       memcpy(notify_data.imei,imei,15);
       debug_print("imei:%s",notify_data.imei);
       //memcpy(notify_data.cellid,cellid,7);
       notify_data.csq=csq;
       //getcellid(notify_data.cellid);
       //memcpy(notify_data.cellid,cellid,7);
       notify_data.rsrp=rsrp;
       notify_data.rsrq=rsrq;
       notify_data.snr=snr;

       //data_length= (uint8_t*)(&(notify_data.cellid))-&(notify_buff.MSGID)+cellidlength;
       // CRC16 = CRC16_Get((uint8_t*)(&notify_data),data_length);
       // *((uint8_t*)(&notify_data)+data_length) = EXTRACT_LH(CRC16);
       //*((uint8_t*)(&notify_data)+data_length+1) = EXTRACT_LL(CRC16);
    bin_to_hex(temp,(const uint8_t *)(&notify_data),94);
      
    //char a[]="000338363632353630333030323034313734363030363030303730303432363800000009001202010E07010156000932303435363630343541A6";
    //debug_print("%s",notify_data.imsi);
    debug_print("data:%s\n",temp);        
    //char number_data[]={"000338363632353630333030323034313734363030363030303730303432363800000009001202010E07010156000932303435363630343541A6"};

    ctiot_client_send_data(temp);       //数据发送
   
    vTaskDelay(1000 / portTICK_RATE_MS);
    lwm2m_notify_success_mm() == TRUE;
        do
         {
         vTaskDelay(1000 / portTICK_RATE_MS); 
         ctiot_lwm2m_client_notify_success();
         break;
         } 
     while(1);
}

//主函数
void  light_main()
{
  for(int i=1;i<2;i++)
  {
   gpio_init(26,1);
   vTaskDelay(1000 / portTICK_RATE_MS);
   gpio_init(26,0);
   vTaskDelay(1000 / portTICK_RATE_MS);
  }
    ril_request_revision_identification(RIL_ACTIVE_MODE,query_swver_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

     ril_request_serial_number(RIL_EXECUTE_MODE,1,query_imei_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);

     ril_request_imsi(RIL_ACTIVE_MODE,query_imsi_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);

     ril_request_query_network_state(RIL_EXECUTE_MODE,0,query_cellid_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);
     
     ril_request_signal_quality(RIL_ACTIVE_MODE,query_csq_callback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);

     ril_request_query_network_state(RIL_EXECUTE_MODE,0,ResponseCallback,NULL);
     vTaskDelay(1000 / portTICK_RATE_MS);
}

//功能执行顺序
static void my_function(void *para)
{   
    //gpio_application();
    //gnss_fota_uart_init();
    //gnss_fota_uart_get_byte();
    //uart_poll_application();
    dma_uart_config();   
    //uart_dma_application();
    light_main();
    //uart_init();
    oc_register();
    data_send();
    
}

//单线程
void  realize_function(void)
{
    xTaskCreate( my_function,
       "function", 
        (1024 * 2)/sizeof(uint8_t),
        NULL,
        1,
        NULL);
}
