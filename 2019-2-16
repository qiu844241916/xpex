#include "stdio.h"
#include "stdlib.h"
#include "hal_sleep_driver.h"
#include "stdarg.h"
#include "hal_gpt.h"
#include "hal_uart.h"
#include "FreeRTOS.h"
#include "task.h"
#include "task_def.h"
#include "hal_platform.h"
#include "apb_proxy.h"
#include "ril.h"
#include "nvdm.h"
#include "auto_register.h"
#include "hal_gpio.h"
#include "hal_rtc.h"
#include "hal_rtc_internal.h"
#include "hal_dvfs_internal.h"
#include "apb_proxy_nw_onenet_cmd.h"

typedef unsigned char uint8_t;
static uint8_t powerkey_lock_sleep_handle;
ATTR_RWDATA_IN_RETSRAM uint8_t connect_flag = 0;    // 注网标志位
ATTR_RWDATA_IN_RETSRAM uint8_t light_flag = 0;      // 数据回调标志
ATTR_RWDATA_IN_RETSRAM uint8_t register_flag = 0;   // 平台注册标志位
ATTR_RWDATA_IN_RETSRAM uint8_t empty_data_flag = 0; //发送空数据包标志位
ATTR_RWDATA_IN_RETSRAM uint8_t data_send_flag = 0;  // 数据发送标志位
ATTR_RWDATA_IN_RETSRAM uint8_t cfun_flag = 0;       //飞行模式标志位
static bool rtc_eint_lock_sleep_flag = false;       // 中断睡眠锁标志位

static uint8_t version[20];      //版本信息
static uint8_t iccid[9];         //iccid 号
static uint8_t imei[15];         //imei码
static uint8_t imsi[15];         //IMSI码
static uint8_t cellid[7];        //小区id
static unsigned int csq;         //CSQ
static uint32_t battery_voltage; //电池电压
static int32_t rsrq;             //信号质量
static int32_t rsrp;             //信号功率
static int32_t snr;              //信噪比

static char *temp[72];           //发送的数据包
static int flag = 1;
//结构定义参数列表
typedef struct
{
    unsigned char MSGID;
    unsigned char FORMAT;
    //unsigned char serial_h;
    //unsigned char serial_l;
    unsigned char imsi[15];
    unsigned char imei[15];
    unsigned char csq;
    //unsigned char cellid[7];
    unsigned char rsrp;
    unsigned char rsrq;
    unsigned char snr;
    //unsigned char CRC_H;
    //unsigned char CRC_L;
} DATA;

DATA notify_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//十六进制的数据转换成十进制
void get_data_to_hex(char *out, char *in, int len) // "866256" -> "383636323536"
{
    int i;
    for (i = 0; i < len; i++)
    {
        sprintf(out + (i * 2), "%x", in[i]);
    }
}

//bin to hex   字节流到十六进制
uint32_t bin_to_hex(char *dest, const uint8_t *source, uint32_t max_dest_len)
{
    uint32_t i = 0, j = 0;
    uint8_t ch1, ch2;
    while (j + 1 < max_dest_len)
    {
        ch1 = (source[i] & 0xF0) >> 4;
        ch2 = source[i] & 0x0F;
        if (ch1 <= 9)
        {
            *(dest + j) = ch1 + '0';
        }
        else
        {
            *(dest + j) = ch1 + 'A' - 10;
        }
        if (ch2 <= 9)
        {
            *(dest + j + 1) = ch2 + '0';
        }
        else
        {
            *(dest + j + 1) = ch2 + 'A' - 10;
        }
        i++;
        j += 2;
    }
    *(dest + j) = '\0';
    return j;
}

//led灯函数
void gpio_init(hal_gpio_pin_t x, hal_gpio_data_t y)
{
    // hal_gpio_init(x);
    hal_pinmux_set_function(x, 0);
    hal_gpio_set_direction(x, HAL_GPIO_DIRECTION_OUTPUT);
    hal_gpio_set_output(x, y);
}

//dma下 配置uart3
static volatile uint32_t receive_notice = 0;
static volatile uint32_t send_notice = 0;
static char rx_vfifo_buffer[512] __attribute__((section(".noncached_zidata")));
static char tx_vfifo_buffer[512] __attribute__((section(".noncached_zidata")));
static void user_uart_callback(hal_uart_callback_event_t status, void *user_data)
{
    if (status == HAL_UART_EVENT_READY_TO_WRITE)
        send_notice = 1;
    else if (status == HAL_UART_EVENT_READY_TO_READ)
        receive_notice = 1;
}

void dma_uart_config(void)
{
    hal_uart_dma_config_t dma_config;
    hal_uart_deinit(HAL_UART_3);
    hal_uart_config_t uart_config;
    uart_config.baudrate = HAL_UART_BAUDRATE_115200;
    uart_config.parity = HAL_UART_PARITY_NONE;
    uart_config.stop_bit = HAL_UART_STOP_BIT_1;
    uart_config.word_length = HAL_UART_WORD_LENGTH_8;
    hal_uart_init(HAL_UART_3, &uart_config);
    dma_config.receive_vfifo_alert_size = 50;
    dma_config.receive_vfifo_buffer = rx_vfifo_buffer;
    dma_config.receive_vfifo_buffer_size = 512;
    dma_config.receive_vfifo_threshold_size = 128;
    dma_config.send_vfifo_buffer = tx_vfifo_buffer;
    dma_config.send_vfifo_buffer_size = 512;
    dma_config.send_vfifo_threshold_size = 30;
    hal_uart_set_dma(HAL_UART_3, &dma_config);
    hal_uart_register_callback(HAL_UART_3, user_uart_callback, NULL);
}

//uart3 打印log信息
int8_t debug_print(const char *fmt, ...)
{
    int n;
    va_list ap;
    //apb_proxy_at_cmd_result_t response;
    char response_data[200];
    va_start(ap, fmt);
    n = vsnprintf(response_data, 200, fmt, ap);
    va_end(ap);
    if (n > -1 && n < 200)
    {
        hal_uart_send_dma(HAL_UART_3, response_data, strlen(response_data));
        return 1;
    }
    return 0;
}

//////////////////////////////////////////query_callback////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//IMEI码回调函数
static int32_t query_imei_callback(ril_cmd_response_t *rsp)
{
    uint8_t imei_len = 0;
    ril_serial_number_rsp_t *param = (ril_serial_number_rsp_t *)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && param != NULL)
    {
        imei_len = strlen(param->value.imei);
        memcpy(imei, param->value.imei, (imei_len > 15) ? 15 : imei_len);
        debug_print("nb_imei_number:%s\n", imei);
    }
    return 0;
}

//IMSI码回调函数
static int32_t query_imsi_callback(ril_cmd_response_t *rsp)
{
    uint8_t imsi_len = 0;
    ril_imsi_rsp_t *param = (ril_imsi_rsp_t *)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && param != NULL)
    {
        imsi_len = strlen(param->imsi);
        memcpy(imsi, param->imsi, (imsi_len > 15) ? 15 : imsi_len);
        debug_print("nb_imsi_number:%s\r\n", imsi);
    }
    return 0;
}

//IP回调函数
static int32_t query_ip_callback(ril_cmd_response_t *rsp)
{
    ril_pdp_context_read_dynamic_parameters_rsp_t *response = (ril_pdp_context_read_dynamic_parameters_rsp_t *)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && response != NULL)
    {
        connect_flag = 1;
        //debug_print("ip and mask is %s\r\n", response->pdp_context[0].local_addr_and_subnet_mask ? response->pdp_context[0].local_addr_and_subnet_mask : "(omitted)");
    }
    return 0;
}

//cellid 回调函数
static int32_t query_cellid_callback(ril_cmd_response_t *cmd_response)
{
    int32_t cell_id;
    if (RIL_EXECUTE_MODE == cmd_response->mode && RIL_RESULT_CODE_OK == cmd_response->res_code)
    {
        ril_query_network_state_rsp_t *param = (ril_query_network_state_rsp_t *)cmd_response->cmd_param;
        if ((param->sc_info != NULL) && (param->sc_info->sc_cellid != NULL))
        {
            //debug_print("sc_cellid:%s\r\n", param->sc_info->sc_cellid ? param->sc_info->sc_cellid : "(omitted)");
            // memcpy(id, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            get_data_to_hex(cellid, param->sc_info->sc_cellid, strlen(param->sc_info->sc_cellid));
            debug_print("cellid:%s\r\n", cellid);
            empty_data_flag = 1;
            //_itoa(cell_id, id, 10);
            //debug_print("id is %s\r\n", id);
        }
    }
    return 0;
}

//获取revision 修订版本号///////////////////////////////////////////////////////////////////////
static int32_t query_swver_callback(ril_cmd_response_t *rsp)
{
    ril_status_t ret = RIL_STATUS_SUCCESS;

    uint8_t swver_len = 0;
    ril_revision_identification_rsp_t *param = (ril_revision_identification_rsp_t *)rsp->cmd_param;

    if (rsp->res_code == RIL_RESULT_CODE_OK && param != NULL)
    {
        swver_len = strlen(param->revision);

        memcpy(version, param->revision, (swver_len > AUTO_REG_SWVER_LEN) ? AUTO_REG_SWVER_LEN : swver_len);
        //query IMSI
        debug_print("revision: %s\r\n", version);
    }
    return 0;
}

//获取信号强度rsrp,信号功率rsrq，信噪比snr//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void ResponseCallback(ril_cmd_response_t *cmd_response)
{
    if (RIL_EXECUTE_MODE == cmd_response->mode && RIL_RESULT_CODE_OK == cmd_response->res_code)
    {
        ril_query_network_state_rsp_t *param = (ril_query_network_state_rsp_t *)cmd_response->cmd_param;
        if ((param->sc_info != NULL) && (param->sc_info->sc_cellid != NULL))
        {
            //CellidNumber = (char*)malloc(strlen(param->sc_info->sc_cellid));
            //CellidNumber = strcpy(CellidNumber,param->sc_info->sc_cellid);
            //String_CopyStrToStr(CellIdNB,CellidNumber,strlen(CellidNumber));
            //CellIdNB[strlen(CellidNumber)] = '\0';
            rsrq = param->sc_info->sc_rsrq;
            if (rsrq < 0)
            {
                rsrq = abs(rsrq);
            }
            debug_print("RSRQ :%d\r\n", rsrq);
            rsrp = param->sc_info->sc_rsrp;
            if (rsrp < 0)
            {
                rsrp = abs(rsrp);
            }
            debug_print("RSRP :%d\r\n", rsrp);
            //EarfcnNumber = param->sc_info->sc_earfcn;
            //if(EarfcnNumber < 0){
            //EarfcnNumber = abs(EarfcnNumber);
            //}
            snr = param->sc_info->sc_snr;
            if (snr < 0)
            {
                snr = abs(snr);
                snr = snr | 0x80;
            }
            debug_print("SNR :%d\r\n", snr);
        }
    }
}

//CSQ回调函数////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static int32_t query_csq_callback(ril_cmd_response_t *rsp)
{
    ril_signal_quality_rsp_t *response = (ril_signal_quality_rsp_t *)rsp->cmd_param;
    if (rsp->res_code == RIL_RESULT_CODE_OK && response != NULL)
    {
        csq = response->rssi;
        debug_print("csq:%d\r\n", csq);
    }
    return 0;
}

//cfun回调函数//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static int32_t query_cfun_callback(ril_cmd_response_t *cmd_response)
{
    ril_set_phone_functionality_rsp_t *response = (ril_set_phone_functionality_rsp_t *)cmd_response->cmd_param;
    if (cmd_response->res_code == RIL_RESULT_CODE_OK && response != NULL)
    {
        cfun_flag = (int)response->fun;
        debug_print("cfun flag = %d\n", cfun_flag);
    }
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//驻网检测

void connect_network(void)
{
    debug_print("connect_network");
    uint32_t count = 0;
    connect_flag = 0;

    vTaskDelay(3000 / portTICK_RATE_MS);
    while (1)
    {
        ril_request_pdp_context_read_dynamic_parameters(RIL_EXECUTE_MODE, 1, query_ip_callback, NULL);
        if (connect_flag == 1)
        {
            break;
        }
        if (count > 100)
            break;
        vTaskDelay(500 / portTICK_RATE_MS);
        count++;
    }
}

//oc华为云平台注册
#if 1
void  oc_register(void)
{   
    int register_number = 30;
    int notify_number = 10;
     uint8_t* ip="139.159.140.34";
     //uint8_t* ip="180.101.147.115";
     uint8_t* port_number="5683";
     uint8_t* time="7200";
     uint8_t* imei_number[15] = {"867994040002897"};
   apb_proxy_parse_cmd_param_t parse_cmd_file;
          parse_cmd_file.string_ptr = (char *)pvPortMalloc(58);
          sprintf(parse_cmd_file.string_ptr,"AT+M2MCLINEW=%s,%s,\"%s\",%s",ip,port_number,"867994040002897",time);
          parse_cmd_file.string_len = 58;
          parse_cmd_file.name_len = 100;
          parse_cmd_file.cmd_id = 223;
          parse_cmd_file.parse_pos = 13;
          parse_cmd_file.mode = 2;
    APB_PROXY_STATUS_OK == apb_proxy_hdlr_lwm2m_client_create_cmd(&parse_cmd_file);
    }
#endif

//数据打包发送oc云平台
void data_send(void)
{
    // uint8_t* ip="139.159.140.34";//华为OC
    //uint8_t* ip="180.101.147.115";//电信
    //unsigned short CRC16;
    //int data_length;
    //serialnumber ++;

    notify_data.MSGID = 0x01;
    notify_data.FORMAT = 0x02;
    //notify_data.serial_h = EXTRACT_LH(serialnumber);
    //notify_data.serial_L = EXTRACT_LL(serialnumber);
    //getimsi(notify_data.imsi);
    memcpy(notify_data.imsi, imsi, 15);
    //getimei(notify_data.imei);
    memcpy(notify_data.imei, imei, 15);
    //debug_print("IMEI:%s",notify_data.imei);
    //memcpy(notify_data.cellid,cellid,7);
    notify_data.csq = csq;
    //getcellid(notify_data.cellid);
    //memcpy(notify_data.cellid,cellid,7);
    notify_data.rsrp = rsrp;
    notify_data.rsrq = rsrq;
    notify_data.snr = snr;

    //data_length= (uint8_t*)(&(notify_data.cellid))-&(notify_buff.MSGID)+cellidlength;
    // CRC16 = CRC16_Get((uint8_t*)(&notify_data),data_length);
    // *((uint8_t*)(&notify_data)+data_length) = EXTRACT_LH(CRC16);
    //*((uint8_t*)(&notify_data)+data_length+1) = EXTRACT_LL(CRC16);
    bin_to_hex(temp, (const uint8_t *)(&notify_data), 72);

    //char a[]="000338363632353630333030323034313734363030363030303730303432363800000009001202010E07010156000932303435363630343541A6";
    //debug_print("%s",notify_data.imsi);
    debug_print("data:%s\n", temp);
    //char number_data[]={"000338363632353630333030323034313734363030363030303730303432363800000009001202010E07010156000932303435363630343541A6"};
    //ctiot_client_create(ip, "5683", imei, 86400);//注册平台

    ctiot_client_send_data(temp); //数据发送

    vTaskDelay(1000 / portTICK_RATE_MS);
    lwm2m_notify_success_mm() == TRUE;
    do
    {
        vTaskDelay(1000 / portTICK_RATE_MS);
        ctiot_lwm2m_client_notify_success();
        break;
    } while (1);
    //rtc_operation();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
//psm接口
static int32_t request_power_saving_mode(ril_cmd_response_t *rsp)
{

return 0;
    
}
void PSM_Call_interface(bool parameter){
    ril_power_saving_mode_setting_req_t req_psm;

    if(parameter == 1)
    {  
        req_psm.mode = 1;
        req_psm.req_act_time = "";
        req_psm.req_gprs_rdy_tmr = "";
        req_psm.req_prdc_rau = "00011000";
        req_psm.req_prdc_tau = "00000000";
        ril_request_power_saving_mode_setting(RIL_EXECUTE_MODE ,&req_psm,request_power_saving_mode,NULL); 
       
    }   
    else
    {
        req_psm.mode = 0;
        req_psm.req_act_time = "";
        req_psm.req_gprs_rdy_tmr = "";
        req_psm.req_prdc_rau = "";
        req_psm.req_prdc_tau = "";
        ril_request_power_saving_mode_setting(RIL_EXECUTE_MODE ,&req_psm,request_power_saving_mode,NULL);
    }
}
#endif

#if 1
ATTR_ZIDATA_IN_RETSRAM uint32_t rtc_sw_timer_handle; //This variable must be global
rtc_sw_timer_status_t rtc_status;
uint32_t time_period_ms = 80000; //means 2000ms(relative time)
bool is_periodic = true;          //The sw timer is periodic
                                  //bool is_periodic = false; //The sw timer is not periodic
void rtc_sw_timer_callback(void *user_data)
{
    if (rtc_eint_lock_sleep_flag == false)
    {
        //flag=0;
        //Add User-related processing
        debug_print("123");
        hal_sleep_manager_acquire_sleeplock(powerkey_lock_sleep_handle, HAL_SLEEP_LOCK_ALL);
        rtc_eint_lock_sleep_flag = true;
    }
    data_send_flag = 1;
    light_flag = 1;
    register_flag = 1;

    //rtc_sw_timer_delete(rtc_sw_timer_handle);
    //rtc_sw_timer_handle = 0; //Must be set to zero when the sw timer is deleted;
}

void rtc_operation(void)
{
    if (rtc_sw_timer_handle == 0)
    {
        rtc_status = rtc_sw_timer_create(&rtc_sw_timer_handle, time_period_ms / 100, is_periodic, rtc_sw_timer_callback);
        if (rtc_status != RTC_SW_TIMER_STATUS_OK)
        {
            debug_print("456");
            //gpio_init(29,1);
        }

        rtc_status = rtc_sw_timer_start(rtc_sw_timer_handle);
        if (rtc_status != RTC_SW_TIMER_STATUS_OK)
        {
            debug_print("789");
            //gpio_init(29,1);
        }
    }
}
#endif
void nvdm_operation(void)
{
    nvdm_status_t status;
    nvdm_status_t status1;
    uint8_t i = "qiuhang";
    uint32_t len = sizeof(i);
    debug_print("3369\n");
    //status = nvdm_read_data_item("important_data","adress",(uint8_t *)&i,&len);
    // if (status != NVDM_STATUS_OK)
    //{
    // debug_print("NVDM STATUS :%d\n",status);
    len = sizeof(i);
    nvdm_write_data_item("important_data", "adress", 0x01, (uint8_t *)&i, len);

    // debug_print("NVDM STATUS :%d\n",i);
    //}
    // vTaskDelay(1000 / portTICK_RATE_MS);
    // vTaskDelete(NULL);
}


static uint32_t light_flash_gpt_sw_timer_handle;

void light_flash_callback(void)
{
   // debug_print("9999");
    int count = 1;
    hal_gpio_toggle_pin(HAL_GPIO_29);
    hal_gpt_sw_start_timer_ms(light_flash_gpt_sw_timer_handle, 100, light_flash_callback, NULL);
    count++;
    if (count == 10)
    {
        gpio_init(29, 0);
    }
}
//////////////////////////////////////////onenet connect///////////////////////////////////////////////////////////////////////////
bool MIPLCREATE_RETURN(int time)
{
    extern bool error_oennet;
    do{
        vTaskDelay(500 / portTICK_RATE_MS);
        time--;
    }while(error_oennet == FALSE || time > 0);
    return error_oennet;
}
void MIPLEVENT_RETURN(void)
{
    extern int  MIPLEVENT_id  ;
    do{
        if(MIPLEVENT_id == 6)
        {
            break;
        }
        vTaskDelay(500 / portTICK_RATE_MS);
    
    }while(1);
}
int MIPLOBSERVE_RETURN_msgid(void)
{
    extern int  msgid ;
    do{
        vTaskDelay(1000 / portTICK_RATE_MS);
    }while(msgid == 0);
    return msgid;
}
int MIPLDISCOVER_RETURN_MSGID(void)
{
    extern int msgid1;
    do{
        vTaskDelay(1000 /  portTICK_RATE_MS);
    }while(msgid1 ==0);
    return msgid1;
}
#if 1
///////////////////////////////////创建一个OneNET instance/////////////////////////////////////////////////////////////////////////////////////////////////////
bool onenet_init_AT_MIPLCREATE(void){
    debug_print("1111\n");
    bool MIPLCREATE = FALSE;
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = "AT+MIPLCREATE";
    parse_cmd.cmd_id = 275;
    parse_cmd.mode = 1;
    parse_cmd.parse_pos = 13;
    parse_cmd.string_len = 14;
    apb_proxy_hdlr_onenet_create_cmd(&parse_cmd);
    MIPLCREATE = MIPLCREATE_RETURN(5);
    return MIPLCREATE;  
}
//////////////////////////////////创建一个object 对象///////////////////////////////////////////////////////////////////////////////////////////////////////////
bool onenet_init_AT_MIPLADDOBJ(int objectid ,int instancecount, char* instancebitmap,int attributecount,int actioncount){
    debug_print("2222\n");
    bool MIPLCREATE = FALSE;
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = (char *)pvPortMalloc(40);
    sprintf(parse_cmd.string_ptr,"AT+MIPLADDOBJ=0,%d,%d,\"%s\",%d,%d",objectid,instancecount,instancebitmap,attributecount,actioncount);
    //parse_cmd.string_ptr = "AT+MIPLADDOBJ=0,3308,3,\"100\",2,0";
    parse_cmd.cmd_id = 279;
    parse_cmd.mode = 2;
    parse_cmd.parse_pos = 14;
    parse_cmd.string_len = utils_strlen(parse_cmd.string_ptr);
    apb_proxy_hdlr_onenet_add_object_cmd(&parse_cmd);
    MIPLCREATE = MIPLCREATE_RETURN(5);
    vPortFree(parse_cmd.string_ptr);
    return MIPLCREATE;
}
///////////////////////////////////设备注册到oneNET平台///////////////////////////////////////////////////////////////////////////////////////////////////////////
bool onenet_init_AT_MIPLOPE(void){
    debug_print("3333\n");
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = "AT+MIPLOPEN=0,90";
    parse_cmd.cmd_id = 277;
    parse_cmd.mode = 2;
    parse_cmd.parse_pos = 12;
    parse_cmd.string_len = utils_strlen(parse_cmd.string_ptr);
    apb_proxy_hdlr_onenet_open_cmd(&parse_cmd);
    MIPLEVENT_RETURN();
    //MIPLOBSERVE_RETURN_msgid();
    debug_print("msgid:%d",MIPLOBSERVE_RETURN_msgid());
    return 0;
}
///////////////////////////////////模组响应平台observe请求//////////////////////////////////////////////////////////////////////////////////////////////////////////
bool onenet_init_AT_MIPLOBSERVERSP(int msgid,int result){
    debug_print("4444\n");
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = (char *)pvPortMalloc(40);
    sprintf(parse_cmd.string_ptr,"AT+MIPLOBSERVERSP=0,%d,%d",msgid,result);
    //AT+MIPLOBSERVERSP=0,76613,1
    parse_cmd.cmd_id = 277;
    parse_cmd.mode = 2;
    parse_cmd.parse_pos = 12;
    parse_cmd.string_len = utils_strlen(parse_cmd.string_ptr);
    apb_proxy_hdlr_onenet_observe_response_cmd(&parse_cmd);

    MIPLDISCOVER_RETURN_MSGID();
    debug_print("msgid1:%d",MIPLDISCOVER_RETURN_MSGID());

    vPortFree(parse_cmd.string_ptr);
    return 0;
}
/////////////////////////////////////模组向平台请求同步数据///////////////////////////////////////////////////////////////////////////////////////////////////////////
bool onenet_init_AT_MIPLNOTIFY(int msgid,int objectid){
    debug_print("5555\n");
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = (char *)pvPortMalloc(60);
    sprintf(parse_cmd.string_ptr,"AT+MIPLNOTIFY=0,%d,%d,%d,%d,%d,%d,%d,%d,%d",\
                msgid,objectid,0,5900,4,4,70,0,0);
    //AT+MIPLNOTIFY=0,76613,3308,2,5900,4,,1.2,1,1
    parse_cmd.cmd_id = 277;
    parse_cmd.mode = 2;
    parse_cmd.parse_pos = 12;
    parse_cmd.string_len = utils_strlen(parse_cmd.string_ptr);
    apb_proxy_hdlr_onenet_observe_response_cmd(&parse_cmd);
   
    vPortFree(parse_cmd.string_ptr);
    return 0;
}
///////////////////////////////////////模块回复支持，并响应平台创建属性//////////////////////////////////////////////////////
bool  onenet_init_AT_DISCOVERRSP(int msgid1){
    apb_proxy_parse_cmd_param_t parse_cmd;
    parse_cmd.string_ptr = (char *)pvPortMalloc(60);
    sprintf(parse_cmd.string_ptr,"AT+DISCOVERRSP=0,%d,%d,%d,%s",\
                msgid1,1,9,"5900;5750");
    parse_cmd.cmd_id = 288;
    parse_cmd.mode = 2;
    parse_cmd.parse_pos = 19;
    parse_cmd.string_len = utils_strlen(parse_cmd.string_ptr);
    apb_proxy_hdlr_onenet_discover_response_cmd(&parse_cmd);

    vPortFree(parse_cmd.string_ptr);
    return 0;
}
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//主函数

void light_main()
{
    uint8_t h;
    uint32_t len = sizeof(h);
    nvdm_read_data_item("important_data", "adress", (uint8_t *)&h, &len);
    debug_print("h:%d\n", h);
    //set_current_time(2018,12,19,13,25,20);
    gpio_init(29, 0);

    //gpio_init(26,1);
    ril_request_revision_identification(RIL_ACTIVE_MODE, query_swver_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

    ril_request_serial_number(RIL_EXECUTE_MODE, 1, query_imei_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

    ril_request_imsi(RIL_ACTIVE_MODE, query_imsi_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

    //ril_request_query_network_state(RIL_EXECUTE_MODE,0,query_cellid_callback,NULL);

    ril_request_signal_quality(RIL_ACTIVE_MODE, query_csq_callback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);

    ril_request_query_network_state(RIL_EXECUTE_MODE, 0, ResponseCallback, NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);
}

//功能执行顺序
static void my_function(void *para)
{
    data_send_flag = 1;
    light_flag = 1;
    register_flag = 1;
    empty_data_flag = 1;

    connect_network();
    dma_uart_config();
    debug_print("7777\n");
    nvdm_operation();
    //ril_request_set_phone_functionality(RIL_EXECUTE_MODE,0,0,NULL,NULL); // CFUN:0
    //ril_request_set_phone_functionality(RIL_READ_MODE,1,0,query_cfun_callback,NULL); // AT+CFUN?
   // while (1)
    //{
        debug_print("connect\n");
        //gpio_application();
        //gnss_fota_uart_init();
        //gnss_fota_uart_get_byte();
        //uart_poll_application();
        //uart_init();
        //uart_dma_application();
        if (empty_data_flag == 1)
        {
            ctiot_client_send_data("FF");
            //ril_request_query_network_state(RIL_EXECUTE_MODE,0,query_cellid_callback,NULL);
            empty_data_flag = 0;
        }
        if (light_flag == 1)
        {
            light_main();
            light_flag = 0;
        }
        if (register_flag == 1)
        {
            ctiot_client_create("139.159.140.34", "5683", imei, "86400");
            //oc_register();
            register_flag = 0;
        }
        if (data_send_flag == 1)
        {
            data_send();
            data_send_flag = 0;
        }
        //rtc_operation();
        if (rtc_eint_lock_sleep_flag == true)
        {
            hal_sleep_manager_release_sleeplock(powerkey_lock_sleep_handle, HAL_SLEEP_LOCK_ALL); // RTC_EINT 释放睡眠锁
            rtc_eint_lock_sleep_flag = false;
        }
        vTaskDelay(1000 / portTICK_RATE_MS);
    //}
    vTaskDelete(NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);
}

void opencpu_main(void)
{
    gpio_init(29, 0);
    hal_gpt_sw_get_timer(&light_flash_gpt_sw_timer_handle);
    hal_gpt_sw_start_timer_ms(light_flash_gpt_sw_timer_handle, 1000, light_flash_callback, NULL);
    //for(int i=0;i<4;++i)
    //{
    //gpio_init(29,1);
    //vTaskDelay(1000 / portTICK_RATE_MS);
    //gpio_init(29,0);
    //vTaskDelay(1000 / portTICK_RATE_MS);
    // }
    vTaskDelete(NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);
}

void light_flash(void)
{    //onenet_connect();
    for (int i = 1; i < 15; i++)
    {
        gpio_init(26, 1);
        vTaskDelay(1000 / portTICK_RATE_MS);
        gpio_init(26, 0);
        vTaskDelay(1000 / portTICK_RATE_MS);
    }
    vTaskDelete(NULL);
    vTaskDelay(1000 / portTICK_RATE_MS);
}
void opencpu_onenet(void)
{
        onenet_init_AT_MIPLCREATE();
        onenet_init_AT_MIPLADDOBJ(3308,3,"100",2,0);
        onenet_init_AT_MIPLOPE();
        vTaskDelay(1000 / portTICK_RATE_MS);
        onenet_init_AT_MIPLOBSERVERSP(MIPLOBSERVE_RETURN_msgid(),1);
        onenet_init_AT_MIPLNOTIFY(MIPLOBSERVE_RETURN_msgid(),3308);
        onenet_init_AT_DISCOVERRSP(MIPLDISCOVER_RETURN_MSGID());
        
        vTaskDelete(NULL);
        vTaskDelay(1000 / portTICK_RATE_MS);

}

//单线程
void realize_function(void)
{
    xTaskCreate(my_function,
                "function",
                (1024 * 2) / sizeof(uint8_t),
                NULL,
                5,
                NULL);
    xTaskCreate(opencpu_main,
                "nvdm",
                (1024 * 2) / sizeof(uint8_t),
                NULL,
                5,
                NULL);
    xTaskCreate(light_flash,
                "light",
                (1024 * 2) / sizeof(uint8_t),
                NULL,
                5,
                NULL);
    xTaskCreate(opencpu_onenet,
                "onenet",
                (1024 * 2) / sizeof(uint8_t),
                NULL,
                5,
                NULL);
}
 

